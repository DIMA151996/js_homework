/*
'number' + 3 + 3 

вивід: number33
Приклеюєш до тектсу 'number' спочатку трійку, потім ще одну. 

null + 3
вивід: 3
Додаєш 3 до нічого, тобто нуля, виходить 3

5 && "qwerty"
вивід:"qwerty"
&& - логічний оператор, якщо те що зліва правда то перевірямо те що зправа. У JS все крым 0 це правда. тому оператор виведе "qwerty"  

+'40' + +'2' + "hillel";
вивід:"qwerty"
+ перетворює стрінгу на число, 40+2, а потім перетворою число в стрингу '42hillel'

'10' - 5 === 6;
вивід: false
10 в число 10-5=5, === порівнюємо і значення, і тип 5 та 6 

true + false
вивід: 1
true це  1, false це 0. 1+0 = 1

'4px' - 3
вивід:NaN
'4px' - не перетвориться на число, '4px' - 3 буде NaN

'4' - 3
вивід: 1 
'4' переведе в число. 4 - 3 буде 1

'6' + 3 ** 0;
вивід:'61'
спочтку виконається ** - степінб (3 в степені 0 буде 1). '6'+ 1 обєднає строку і буде '61'

12 / '6'
вивід:2
так як і раніше, 6 в число, 12 поділити на 6 буде 2

'10' + (5 === 6);
вивід:'10false'
порівняє 5 та 6, будк false і переведе в стрінгу

null == ''
вивід:false
полрівняє null з порожнім рядком

3 ** (9 / 3);
вивід:27
поділить 9 на 3, піднесе 3 в степені 3 і буде 27

!!'false' == !!'true'
вивід:true
порывняє рядки, так як рядки не пусті вони true обидва, тобто порявняэ true та true

0 || '0' && 1
вивід:1 
спочатку порахується &&, а потім ||. '0' && 1 і те, і те правда то виведе правий 1. 0 || 1 - це логічне або, тобто буде 1

(+null == false) < 1;
вивід:false
+ зробить з null 0, порівняється 0 з false, буде true, бо false це 0, типу 0 == 0. Далі true < 1, так само як і з false тільки напрпаки, 1 < 1 буде false

false && true || true
вивід:false
false && true буде false, далі false || true буде true. Вище писав чому.

false && (false || true);
вивід:false
так як і у попередньому тільки спочатку ||

(+null == false) < 1 ** 5;
вивід:true
+ зробить з null 0, порівняється 0 з false, буде true, бо false це 0, типу 0 == 0. після цього 1 ** 5, 1 в степені 5 буде 1. далі true < 1 буде true

*/
